
import java.awt.Font;
import java.awt.print.PrinterException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableModel;
import javax.swing.JOptionPane;
import javax.swing.JFrame;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author hp
 */
public class SellForm extends javax.swing.JFrame {

    /**
     * Creates new form SellForm
     */
    public SellForm() {
        initComponents();
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        tblHeader();
        
    }
    private void tblHeader()
    {
        JTableHeader tHeader = tblDisplay.getTableHeader();
        tHeader.setFont(new Font("Tahome", Font.BOLD, 20));
        tHeader.setForeground(java.awt.Color.WHITE);
        tHeader.setBackground(java.awt.Color.DARK_GRAY);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblDisplay = new javax.swing.JLabel();
        lblProduct = new javax.swing.JLabel();
        lblQuant = new javax.swing.JLabel();
        lblRate = new javax.swing.JLabel();
        txtPid = new javax.swing.JTextField();
        txtQuant = new javax.swing.JTextField();
        txtRate = new javax.swing.JTextField();
        btnProceed = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDisplay = new javax.swing.JTable();
        btnDelete = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(640, 480));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblDisplay.setFont(new java.awt.Font("Segoe UI", 1, 32)); // NOI18N
        lblDisplay.setText("SELLING FORM");
        getContentPane().add(lblDisplay, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 30, 240, -1));

        lblProduct.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblProduct.setText("Product Id");
        getContentPane().add(lblProduct, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 130, -1, -1));

        lblQuant.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblQuant.setText("Quantity");
        getContentPane().add(lblQuant, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 180, -1, -1));

        lblRate.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblRate.setText("Rate");
        getContentPane().add(lblRate, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 230, -1, -1));

        txtPid.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        txtPid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPidActionPerformed(evt);
            }
        });
        getContentPane().add(txtPid, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 120, 144, 30));

        txtQuant.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        txtQuant.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtQuantKeyPressed(evt);
            }
        });
        getContentPane().add(txtQuant, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 170, 144, 30));

        txtRate.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        txtRate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtRateKeyPressed(evt);
            }
        });
        getContentPane().add(txtRate, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 220, 144, 30));

        btnProceed.setBackground(new java.awt.Color(0, 102, 102));
        btnProceed.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 20)); // NOI18N
        btnProceed.setForeground(new java.awt.Color(255, 255, 255));
        btnProceed.setText("Proceed");
        btnProceed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProceedActionPerformed(evt);
            }
        });
        getContentPane().add(btnProceed, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 230, 360, 40));

        btnAdd.setBackground(new java.awt.Color(0, 102, 102));
        btnAdd.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 20)); // NOI18N
        btnAdd.setForeground(new java.awt.Color(255, 255, 255));
        btnAdd.setText("Add To List");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        getContentPane().add(btnAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 130, 360, 40));

        tblDisplay.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        tblDisplay.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Date", "Pid", "Quantity", "Rate", "Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblDisplay.setRowHeight(20);
        tblDisplay.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDisplayMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblDisplay);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 280, 1283, 360));

        btnDelete.setBackground(new java.awt.Color(0, 51, 51));
        btnDelete.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 20)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(255, 255, 255));
        btnDelete.setText("Delete Item");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        getContentPane().add(btnDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(1130, 180, 180, 40));

        jButton1.setBackground(new java.awt.Color(0, 51, 51));
        jButton1.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 20)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Add More");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 180, 160, 40));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtPidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPidActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPidActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
       
        if(validateDetails())
        {
            String sql = "SELECT * FROM INVENTORY WHERE PID=?"; 
            int quant = 0;
            try{
            DatabaseConnect db = new DatabaseConnect();
            PreparedStatement pst = db.conn.prepareStatement(sql);
            pst.setString(1, txtPid.getText().trim());
            ResultSet rs = pst.executeQuery();
                
            if(rs.next())
            {
                quant = rs.getInt("NET");
            }
            else
            {
                JOptionPane.showMessageDialog(null, "No Product found with given ID");
                resetForm();
                return;
            }
            pst.close();
            
            } catch (SQLException ex) {
                Logger.getLogger(Inventory.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException ex) {
                Logger.getLogger(SellForm.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            int quant_needed = Integer.parseInt(txtQuant.getText().trim());
            if(quant < quant_needed)
            {
                JOptionPane.showMessageDialog(null, "The given order cannot be fulfilled.");
                resetForm();
                return;
            }
            
            Date dt = new Date();
            String stamp = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Timestamp(dt.getTime()));
            
            int total = Integer.parseInt(txtQuant.getText().trim()) * Integer.parseInt(txtRate.getText().trim());
            String data[] = {stamp, txtPid.getText().trim(), txtQuant.getText().trim(), txtRate.getText().trim(), Integer.toString(total)}; 
            DefaultTableModel model = (DefaultTableModel) tblDisplay.getModel();
            model.addRow(data);
            updateInventory(-1);
            JOptionPane.showMessageDialog(null, "Product added to list successfully!");
            resetForm();
        }
    }//GEN-LAST:event_btnAddActionPerformed
    
    private void btnProceedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProceedActionPerformed
        // TODO add your handling code here:
        int pay = 0;
        DefaultTableModel model = (DefaultTableModel) tblDisplay.getModel();
        String pid, tstamp;
        int quant, rate, total;
        
        String pattern = "yyyy-MM-dd HH:mm:ss";
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(pattern);
        
        ArrayList<Record> transactions = new ArrayList<>();
        for(int i=0; i<model.getRowCount(); i++)
        {
            tstamp = (String) model.getValueAt(i, 0);
            LocalDateTime localDateTime = LocalDateTime.from(formatter.parse(tstamp));
            Timestamp stamp = Timestamp.valueOf(localDateTime);
        
            pid = (String) model.getValueAt(i, 1);
            quant = Integer.parseInt((String) model.getValueAt(i, 2));
            rate = Integer.parseInt((String) model.getValueAt(i, 3));
            total = Integer.parseInt((String) model.getValueAt(i, 4));
            pay += total;
            Record rec = new Record(pid,stamp,quant,rate,total);
            transactions.add(rec);
        }
        salesUpdate(transactions);
        
        String data[] = {"", "", "", "", Integer.toString(pay)}; 
        model.addRow(data);
               
        try 
        {
            tblDisplay.print();
            resetTable();
        } catch (PrinterException ex) {
            Logger.getLogger(SellForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        resetForm();
    }//GEN-LAST:event_btnProceedActionPerformed
    
    private void resetTable()
    {
        DefaultTableModel model = (DefaultTableModel) tblDisplay.getModel();
        model.setRowCount(0);
    }
    private void salesUpdate(ArrayList<Record> data)
    {
        String sql = "INSERT INTO SALES (PID, DATE, QUANTITY, RATE, TOTAL) VALUES (?,?,?,?,?)";
        try {
            DatabaseConnect db = new DatabaseConnect();
            PreparedStatement pst = db.conn.prepareStatement(sql);
                
            for(int i=0; i<data.size(); i++)
            {
                pst.setString(1, data.get(i).getPid());
                pst.setTimestamp(2, data.get(i).getDate());
                pst.setInt(3, data.get(i).getQuant());
                pst.setInt(4, data.get(i).getRate());
                pst.setInt(5, data.get(i).getTotal());

                pst.executeUpdate();
            }
            pst.close();
            System.out.println("Added to sales Table!");
        } catch (SQLException ex) {
            Logger.getLogger(Inventory.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException ex) {
            Logger.getLogger(SellForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
    private void txtRateKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRateKeyPressed
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if(Character.isLetter(c))
        {    
            txtRate.setEditable(false);
        } 
        else
        {
            txtRate.setEditable(true);
        }
    }//GEN-LAST:event_txtRateKeyPressed

    private void txtQuantKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtQuantKeyPressed
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if(Character.isLetter(c))
        {    
            txtQuant.setEditable(false);
        } 
        else
        {
            txtQuant.setEditable(true);
        }
    }//GEN-LAST:event_txtQuantKeyPressed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tblDisplay.getModel();
        
        if(tblDisplay.getSelectedRowCount() == 1)
        {
            int row = tblDisplay.getSelectedRow();
            updateInventory(1);
            model.removeRow(row);
            JOptionPane.showMessageDialog(null, "Item removed successfuly!");
            resetForm();
        }
        else
        {
            if(tblDisplay.getRowCount() == 0)
            {
                JOptionPane.showMessageDialog(null, "The table is Empty!");
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Please select a single row!");
               
            }
        }    
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void tblDisplayMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDisplayMouseClicked
        // TODO add your handling code here:
        int row = tblDisplay.getSelectedRow();
        TableModel model = tblDisplay.getModel();
        txtPid.setText(model.getValueAt(row, 1).toString());
        txtQuant.setText(model.getValueAt(row, 2).toString());
        txtRate.setText(model.getValueAt(row, 3).toString());
        txtPid.setEditable(false);
        txtQuant.setEditable(false);
        txtRate.setEditable(false);
        btnAdd.setEnabled(false);
        JOptionPane.showMessageDialog(null, "Click on Add More to add items to list!");
    }//GEN-LAST:event_tblDisplayMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        resetForm();
        txtPid.setEditable(true);
        txtQuant.setEditable(true);
        txtRate.setEditable(true);
        btnAdd.setEnabled(true);
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tblDisplay.getModel();
        if(model.getRowCount() != 0)
        {
            JOptionPane.showMessageDialog(null, "Clear the list");
        }
        else
        {
            this.dispose();
        }
    }//GEN-LAST:event_formWindowClosing

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowActivated

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SellForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SellForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SellForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SellForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new SellForm().setVisible(true);
        });
    }

    private boolean validateDetails()
    {
        if(txtPid.getText().trim().isEmpty())
        {
            JOptionPane.showMessageDialog(SellForm.this, "Please enter a Product id");
            return false;
        }
        if(txtQuant.getText().trim().isEmpty())
        {
            JOptionPane.showMessageDialog(SellForm.this, "Please enter some Quantity");
            return false;
        }
        if(txtRate.getText().trim().isEmpty())
        {
            JOptionPane.showMessageDialog(SellForm.this, "Please enter a rate");
            return false;
        }
        return true;
    }
    
    private void resetForm()
    {
        txtPid.setText("");
        txtQuant.setText("");
        txtRate.setText("");
    }
    
    
    private void updateInventory(int type)
    {
        int quant=0,damage=0; 
            
        try{
            String sql = "SELECT * FROM INVENTORY WHERE PID=?"; 
            DatabaseConnect db = new DatabaseConnect();
            PreparedStatement pst = db.conn.prepareStatement(sql);
            pst.setString(1, txtPid.getText().trim());
            ResultSet rs = pst.executeQuery();
            if(rs.next())
            {
               quant = rs.getInt("QUANTITY");
               damage = rs.getInt("BREAKAGE");
            }
            pst.close();    
            
        } catch (SQLException ex) {
                Logger.getLogger(Inventory.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException ex) {
            Logger.getLogger(SellForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        String sql = "UPDATE INVENTORY SET QUANTITY=?, NET=? WHERE PID=?";     
        try{
            quant = quant + (Integer.parseInt(txtQuant.getText().trim())*type);
            int net = quant -  damage;
            DatabaseConnect db = new DatabaseConnect();
            PreparedStatement pst = db.conn.prepareStatement(sql);
            pst.setInt(1, quant);
            pst.setInt(2, net);
            pst.setString(3, txtPid.getText().trim());
            int executeUpdate = pst.executeUpdate();
            pst.close();
               
        } catch (SQLException ex) {
                Logger.getLogger(Inventory.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException ex) {
            Logger.getLogger(SellForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnProceed;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblDisplay;
    private javax.swing.JLabel lblProduct;
    private javax.swing.JLabel lblQuant;
    private javax.swing.JLabel lblRate;
    private javax.swing.JTable tblDisplay;
    private javax.swing.JTextField txtPid;
    private javax.swing.JTextField txtQuant;
    private javax.swing.JTextField txtRate;
    // End of variables declaration//GEN-END:variables
}
